// Code generated by mockery v2.9.4. DO NOT EDIT.

package mock

import (
	edpv1alpha1 "github.com/epam/edp-cd-pipeline-operator/v2/pkg/apis/edp/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	jenkinsApi "github.com/epam/edp-jenkins-operator/v2/pkg/apis/v2/v1"

	keycloakApi "github.com/epam/edp-keycloak-operator/pkg/apis/v1/v1"
)

// PlatformService is an autogenerated mock type for the PlatformService type
type PlatformService struct {
	mock.Mock
}

// AddVolumeToInitContainer provides a mock function with given fields: instance, containerName, vol, volMount
func (_m *PlatformService) AddVolumeToInitContainer(instance *jenkinsApi.Jenkins, containerName string, vol []v1.Volume, volMount []v1.VolumeMount) error {
	ret := _m.Called(instance, containerName, vol, volMount)

	var r0 error
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins, string, []v1.Volume, []v1.VolumeMount) error); ok {
		r0 = rf(*instance, containerName, vol, volMount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfigMap provides a mock function with given fields: instance, name, data, labels
func (_m *PlatformService) CreateConfigMap(instance *jenkinsApi.Jenkins, name string, data map[string]string, labels ...map[string]string) (*v1.ConfigMap, error) {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, instance, name, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func(*jenkinsApi.Jenkins, string, map[string]string, ...map[string]string) *v1.ConfigMap); ok {
		r0 = rf(instance, name, data, labels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jenkinsApi.Jenkins, string, map[string]string, ...map[string]string) error); ok {
		r1 = rf(instance, name, data, labels...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigMapFromFileOrDir provides a mock function with given fields: instance, configMapName, configMapKey, path, ownerReference, customLabels
func (_m *PlatformService) CreateConfigMapFromFileOrDir(instance *jenkinsApi.Jenkins, configMapName string, configMapKey *string, path string, ownerReference metav1.Object, customLabels ...map[string]string) error {
	_va := make([]interface{}, len(customLabels))
	for _i := range customLabels {
		_va[_i] = customLabels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, instance, configMapName, configMapKey, path, ownerReference)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins, string, *string, string, metav1.Object, ...map[string]string) error); ok {
		r0 = rf(*instance, configMapName, configMapKey, path, ownerReference, customLabels...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfigMapWithUpdate provides a mock function with given fields: instance, name, data, labels
func (_m *PlatformService) CreateConfigMapWithUpdate(instance *jenkinsApi.Jenkins, name string, data map[string]string, labels ...map[string]string) (bool, error) {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, instance, name, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins, string, map[string]string, ...map[string]string) bool); ok {
		r0 = rf(*instance, name, data, labels...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jenkinsApi.Jenkins, string, map[string]string, ...map[string]string) error); ok {
		r1 = rf(*instance, name, data, labels...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEDPComponentIfNotExist provides a mock function with given fields: instance, url, icon
func (_m *PlatformService) CreateEDPComponentIfNotExist(instance jenkinsApi.Jenkins, url string, icon string) error {
	ret := _m.Called(instance, url, icon)

	var r0 error
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins, string, string) error); ok {
		r0 = rf(instance, url, icon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJenkinsScript provides a mock function with given fields: namespace, configMap, forceExecute
func (_m *PlatformService) CreateJenkinsScript(namespace string, configMap string, forceExecute bool) (*jenkinsApi.JenkinsScript, error) {
	ret := _m.Called(namespace, configMap, forceExecute)

	var r0 *jenkinsApi.JenkinsScript
	if rf, ok := ret.Get(0).(func(string, string, bool) *jenkinsApi.JenkinsScript); ok {
		r0 = rf(namespace, configMap, forceExecute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jenkinsApi.JenkinsScript)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(namespace, configMap, forceExecute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeycloakClient provides a mock function with given fields: kc
func (_m *PlatformService) CreateKeycloakClient(kc *keycloakApi.KeycloakClient) error {
	ret := _m.Called(kc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*keycloakApi.KeycloakClient) error); ok {
		r0 = rf(kc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSecret provides a mock function with given fields: instance, name, data
func (_m *PlatformService) CreateSecret(instance *jenkinsApi.Jenkins, name string, data map[string][]byte) error {
	ret := _m.Called(instance, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins, string, map[string][]byte) error); ok {
		r0 = rf(*instance, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStageJSON provides a mock function with given fields: stage
func (_m *PlatformService) CreateStageJSON(stage edpv1alpha1.Stage) (string, error) {
	ret := _m.Called(stage)

	var r0 string
	if rf, ok := ret.Get(0).(func(edpv1alpha1.Stage) string); ok {
		r0 = rf(stage)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(edpv1alpha1.Stage) error); ok {
		r1 = rf(stage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigMapData provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetConfigMapData(namespace string, name string) (map[string]string, error) {
	ret := _m.Called(namespace, name)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalEndpoint provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetExternalEndpoint(namespace string, name string) (string, string, string, error) {
	ret := _m.Called(namespace, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string) string); ok {
		r2 = rf(namespace, name)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string) error); ok {
		r3 = rf(namespace, name)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetKeycloakClient provides a mock function with given fields: name, namespace
func (_m *PlatformService) GetKeycloakClient(name string, namespace string) (keycloakApi.KeycloakClient, error) {
	ret := _m.Called(name, namespace)

	var r0 keycloakApi.KeycloakClient
	if rf, ok := ret.Get(0).(func(string, string) keycloakApi.KeycloakClient); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Get(0).(keycloakApi.KeycloakClient)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretData provides a mock function with given fields: namespace, name
func (_m *PlatformService) GetSecretData(namespace string, name string) (map[string][]byte, error) {
	ret := _m.Called(namespace, name)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func(string, string) map[string][]byte); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDeploymentReady provides a mock function with given fields: instance
func (_m *PlatformService) IsDeploymentReady(instance jenkinsApi.Jenkins) (bool, error) {
	ret := _m.Called(instance)

	var r0 bool
	if rf, ok := ret.Get(0).(func(jenkinsApi.Jenkins) bool); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jenkinsApi.Jenkins) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
