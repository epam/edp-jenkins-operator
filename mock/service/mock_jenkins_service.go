// Code generated by mockery v2.15.0. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/epam/edp-jenkins-operator/v2/pkg/apis/v2/v1"
)

// JenkinsService is an autogenerated mock type for the JenkinsService type
type JenkinsService struct {
	mock.Mock
}

// Configure provides a mock function with given fields: instance
func (_m *JenkinsService) Configure(instance *v1.Jenkins) (*v1.Jenkins, bool, error) {
	ret := _m.Called(instance)

	var r0 *v1.Jenkins
	if rf, ok := ret.Get(0).(func(*v1.Jenkins) *v1.Jenkins); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Jenkins)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1.Jenkins) bool); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*v1.Jenkins) error); ok {
		r2 = rf(instance)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateAdminPassword provides a mock function with given fields: instance
func (_m *JenkinsService) CreateAdminPassword(instance *v1.Jenkins) error {
	ret := _m.Called(instance)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Jenkins) error); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExposeConfiguration provides a mock function with given fields: instance
func (_m *JenkinsService) ExposeConfiguration(instance *v1.Jenkins) (*v1.Jenkins, bool, error) {
	ret := _m.Called(instance)

	var r0 *v1.Jenkins
	if rf, ok := ret.Get(0).(func(*v1.Jenkins) *v1.Jenkins); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Jenkins)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1.Jenkins) bool); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*v1.Jenkins) error); ok {
		r2 = rf(instance)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Integration provides a mock function with given fields: instance
func (_m *JenkinsService) Integration(instance *v1.Jenkins) (*v1.Jenkins, bool, error) {
	ret := _m.Called(instance)

	var r0 *v1.Jenkins
	if rf, ok := ret.Get(0).(func(*v1.Jenkins) *v1.Jenkins); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Jenkins)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1.Jenkins) bool); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*v1.Jenkins) error); ok {
		r2 = rf(instance)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsDeploymentReady provides a mock function with given fields: instance
func (_m *JenkinsService) IsDeploymentReady(instance *v1.Jenkins) (bool, error) {
	ret := _m.Called(instance)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1.Jenkins) bool); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Jenkins) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJenkinsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewJenkinsService creates a new instance of JenkinsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJenkinsService(t mockConstructorTestingTNewJenkinsService) *JenkinsService {
	mock := &JenkinsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
