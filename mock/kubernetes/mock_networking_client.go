// Code generated by mockery v2.9.5. DO NOT EDIT.
package mock

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	rest "k8s.io/client-go/rest"
)

// NetworkingClient is an autogenerated mock type for the NetworkingClient type
type NetworkingClient struct {
	mock.Mock
}

// IngressClasses provides a mock function with given fields:
func (_m *NetworkingClient) IngressClasses() v1.IngressClassInterface {
	ret := _m.Called()
	var r0 v1.IngressClassInterface
	if rf, ok := ret.Get(0).(func() v1.IngressClassInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.IngressClassInterface)
		}
	}

	return r0
}

// Ingresses provides a mock function with given fields: namespace
func (_m *NetworkingClient) Ingresses(namespace string) v1.IngressInterface {
	ret := _m.Called(namespace)
	var r0 v1.IngressInterface
	if rf, ok := ret.Get(0).(func(string) v1.IngressInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.IngressInterface)
		}
	}

	return r0
}

// NetworkPolicies provides a mock function with given fields: namespace
func (_m *NetworkingClient) NetworkPolicies(namespace string) v1.NetworkPolicyInterface {
	ret := _m.Called(namespace)
	var r0 v1.NetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v1.NetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.NetworkPolicyInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *NetworkingClient) RESTClient() rest.Interface {
	ret := _m.Called()
	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}
